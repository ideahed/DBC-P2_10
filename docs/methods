[:client, :method_missing, :respond_to?, :adapter, :adapter=, :client_id, :client_id=, :client_secret, :client_secret=, :access_token, :access_token=, :endpoint, :endpoint=, :format, :format=, :user_agent, :user_agent=, :proxy, :proxy=, :configure, :options, :reset, :freeze, :===, :==, :<=>, :<, :<=, :>, :>=, :to_s, :included_modules, :include?, :name, :ancestors, :instance_methods, :public_instance_methods, :protected_instance_methods, :private_instance_methods, :constants, :const_get, :const_set, :const_defined?, :class_variables, :remove_class_variable, :class_variable_get, :class_variable_set, :class_variable_defined?, :public_constant, :private_constant, :module_exec, :class_exec, :module_eval, :class_eval, :method_defined?, :public_method_defined?, :private_method_defined?, :protected_method_defined?, :public_class_method, :private_class_method, :autoload, :autoload?, :instance_method, :public_instance_method, :psych_yaml_as, :yaml_as, :deprecate, :alias_method_chain, :alias_attribute, :remove_possible_method, :redefine_method, :mattr_reader, :mattr_writer, :mattr_accessor, :parent_name, :parent, :parents, :local_constants, :local_constant_names, :anonymous?, :qualified_const_defined?, :qualified_const_get, :qualified_const_set, :delegate, :duplicable?, :const_missing, :unloadable, :psych_to_yaml, :to_yaml_properties, :to_yaml, :in?, :blank?, :present?, :presence, :acts_like?, :try, :to_json, :instance_values, :instance_variable_names, :as_json, :require_or_load, :require_dependency, :require_association, :load_dependency, :load, :require, :nil?, :=~, :!~, :eql?, :hash, :class, :singleton_class, :clone, :dup, :initialize_dup, :initialize_clone, :taint, :tainted?, :untaint, :untrust, :untrusted?, :trust, :frozen?, :inspect, :methods, :singleton_methods, :protected_methods, :private_methods, :public_methods, :instance_variables, :instance_variable_get, :instance_variable_set, :instance_variable_defined?, :instance_of?, :kind_of?, :is_a?, :tap, :send, :public_send, :respond_to_missing?, :extend, :display, :method, :public_method, :define_singleton_method, :object_id, :to_enum, :enum_for, :gem, :silence_warnings, :enable_warnings, :with_warnings, :silence_stderr, :silence_stream, :suppress, :capture, :silence, :quietly, :equal?, :!, :!=, :instance_eval, :instance_exec, :__send__, :__id__] 


has_many :instagrams
  accepts_nested_attributes :users
  
  def fetch_instagrams!
  new_grams = Instagram.media.search("37.79221","-122.406141", count: 100)
  new_grams.each do |gram|
    p gram
    self.grams << gram.create(
      text: gram.caption.text
      created_at: gram.created_time
      name: grams.caption.from.full_name
      username: grams.caption.from.username
      url: grams.images.standard_resolution.
      location: grams.location.latitude + grams.location.longitude
      filter: grams.filter
      )
  end

def change
    create_table :instagrams do |i|
      i.string :text
      i.datetime :created_at
      i.string :filter
      i.belongs_to :username
      i.string :tags
      i.string :url
    end
  end
